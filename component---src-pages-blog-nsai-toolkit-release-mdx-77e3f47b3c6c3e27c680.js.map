{"version":3,"file":"component---src-pages-blog-nsai-toolkit-release-mdx-77e3f47b3c6c3e27c680.js","mappings":"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","sources":["webpack://neuro-symbolic-ai-toolkit-site/./src/pages/blog/nsai-toolkit-release.mdx","webpack://neuro-symbolic-ai-toolkit-site/./src/layouts/defaultLayout.js","webpack://neuro-symbolic-ai-toolkit-site/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack://neuro-symbolic-ai-toolkit-site/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack://neuro-symbolic-ai-toolkit-site/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack://neuro-symbolic-ai-toolkit-site/./src/components/RepoLink.js","webpack://neuro-symbolic-ai-toolkit-site/./src/components/RepoLinkList.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM-Research-AI/neuro-symbolic-ai-toolkit-site/src/layouts/defaultLayout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`We released the IBM Neuro-Symbolic AI Toolkit.\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/neuro-symbolic-ai-toolkit\"\n      }}>{`https://github.com/IBM/neuro-symbolic-ai-toolkit`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport { MDXProvider } from \"@mdx-js/react\"\n\nimport Utils from 'gatsby-theme-carbon/src/components/Utils';\nimport Layout from 'gatsby-theme-carbon/src/components/Layout';\nimport PageHeader from 'gatsby-theme-carbon/src/components/PageHeader';\nimport EditLink from 'gatsby-theme-carbon/src/components/EditLink';\nimport NextPrevious from 'gatsby-theme-carbon/src/components/NextPrevious';\nimport PageTabs from 'gatsby-theme-carbon/src/components/PageTabs';\nimport Main from 'gatsby-theme-carbon/src/components/Main';\nimport useMetadata from 'gatsby-theme-carbon/src/util/hooks/useMetadata';\nimport LastModifiedDate from 'gatsby-theme-carbon/src/components/LastModifiedDate';\n\nimport RepoLink from \"../components/RepoLink\";\nimport RepoLinkList from \"../components/RepoLinkList\";\n\nconst RepoLayout = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n  const shortcodes = { RepoLink, RepoLinkList, Link }\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        <MDXProvider components={shortcodes}>{children}</MDXProvider>\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default RepoLayout;\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport * as styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"last-modified-date-module--bx--text-truncate--end--QgCc7\";\nexport var bxTextTruncateFront = \"last-modified-date-module--bx--text-truncate--front--kel8a\";\nexport var text = \"last-modified-date-module--text--ogPQF\";\nexport var row = \"last-modified-date-module--row--XJoYQ\";","import React from \"react\"\nimport {  StaticQuery, graphql, Link } from \"gatsby\"\nimport * as scss from \"./ReposByTag.module.scss\"\nimport Tags from \"../data/tags.json\"\n\nconst getTagIndex = (tagName) => {\n  const res = Tags.findIndex((t) => t.key === tagName)\n\n  if (res === -1) return 999\n\n  return res\n}\n\nconst getTagByKey = (tagName) => {\n  return Tags.find((t) => t.key === tagName) || false\n}\n\nconst sortTags = (a, b) => {\n  const idxA = getTagIndex(a)\n  const idxB = getTagIndex(b)\n\n  if (idxA > idxB) {\n    return 1;\n  }\n  if (idxA < idxB) {\n    return -1;\n  }\n  return 0;\n}\n\nconst renderTagList = (tags) => {\n  const items = []\n\n  for (const t of tags.sort((a, b) => sortTags(a, b))) {\n    let tagClass = \"bx--tag\"\n    if (getTagByKey(t)) {\n      tagClass += \" bx--tag--green\"\n    } else {\n      tagClass += \" bx--tag--cool-gray\"\n    }\n    items.push(<button class={tagClass}> <span class=\"bx--tag__label\" title={getTagByKey(t).name}>{t}</span> </button>)\n  }\n\n  return items\n}\n\nconst getPage = (d, url) => {\n  const slug = url.replace(\"/toolkit/\",\"\")\n  const pages = d.allMdx.edges\n\n  const res = pages.filter( p => p.node.slug === slug)\n\n  return res[0].node\n}\n\nconst renderFunction = (d, url) => {\n  const data = getPage(d, url)\n  const fm = data.frontmatter\n  const slug = data.slug\n  const to = `/toolkit/${slug}`\n\n  const item = (\n    <div>\n      <div className={scss.pb}>\n        <h4>{fm.title}</h4>\n        <p className={scss.italic}>{fm.description}</p>\n      </div>\n      <p className={scss.pt}>{renderTagList(fm.tags)}</p>\n    </div>\n  )\n\n  return <Link to={to} className={scss.tile}>{item}</Link>\n}\n\nconst RepoLink = (url) => (\n  <StaticQuery\n    query={graphql`\n    {\n      allMdx(\n        filter: {fields: {source: {eq: \"toolkit\"}}, frontmatter: {tags: {}}, slug: {}}\n        sort: {fields: frontmatter___weight, order: ASC}\n      ) {\n        edges {\n          node {\n            id\n            slug\n            frontmatter {\n              description\n              tags\n              url\n              title\n            }\n          }\n        }\n      }\n    }\n    `}\n    render={data => renderFunction(data, url.to)}\n  />\n)\n\n\nexport default RepoLink\n\n\n\n","import React from \"react\"\nimport * as scss from \"./ReposByTag.module.scss\"\n\n\n\nconst RepoLinkList = (li) => {\n    return <div className={scss.flex}>{li.children}</div>\n}\n\n\nexport default RepoLinkList\n\n\n\n"],"names":["_frontmatter","layoutProps","MDXLayout","pageContext","children","location","Title","frontmatter","relativePagePath","titleType","tabs","title","frontmatterTheme","theme","description","keywords","date","interiorTheme","useMetadata","shortcodes","RepoLink","RepoLinkList","Link","pathPrefix","useStaticQuery","site","slug","pathname","replace","currentTab","split","filter","Boolean","slice","slugify","lower","Layout","homepage","pageTitle","pageDescription","pageKeywords","PageHeader","label","PageTabs","Main","padded","components","EditLink","LastModifiedDate","NextPrevious","Utils","MDXContent","props","mdxType","parentName","isMDXComponent","lastModified","Date","className","toLocaleDateString","day","year","month","getTagIndex","tagName","res","Tags","t","key","getTagByKey","renderTagList","tags","items","sort","a","b","idxA","idxB","sortTags","tagClass","push","class","name","url","StaticQuery","query","render","data","d","allMdx","edges","p","node","getPage","fm","to","item","scss","renderFunction","li"],"sourceRoot":""}