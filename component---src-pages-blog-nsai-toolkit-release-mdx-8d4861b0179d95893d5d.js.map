{"version":3,"file":"component---src-pages-blog-nsai-toolkit-release-mdx-8d4861b0179d95893d5d.js","mappings":"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","sources":["webpack://neuro-symbolic-ai-toolkit-site/./src/pages/blog/nsai-toolkit-release.mdx","webpack://neuro-symbolic-ai-toolkit-site/./src/layouts/defaultLayout.js","webpack://neuro-symbolic-ai-toolkit-site/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack://neuro-symbolic-ai-toolkit-site/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack://neuro-symbolic-ai-toolkit-site/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack://neuro-symbolic-ai-toolkit-site/./src/components/ButtonLink.js","webpack://neuro-symbolic-ai-toolkit-site/./src/components/People.js","webpack://neuro-symbolic-ai-toolkit-site/./src/components/People.module.scss","webpack://neuro-symbolic-ai-toolkit-site/./src/components/Person.js","webpack://neuro-symbolic-ai-toolkit-site/./src/components/Person.module.scss","webpack://neuro-symbolic-ai-toolkit-site/./src/components/RepoLink.js","webpack://neuro-symbolic-ai-toolkit-site/./src/components/RepoLinkList.js","webpack://neuro-symbolic-ai-toolkit-site/./src/components/seo.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM-Research-AI/neuro-symbolic-ai-toolkit-site/src/layouts/defaultLayout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`We released the IBM Neuro-Symbolic AI Toolkit.\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/neuro-symbolic-ai-toolkit\"\n      }}>{`https://github.com/IBM/neuro-symbolic-ai-toolkit`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport { MDXProvider } from \"@mdx-js/react\"\n\nimport Utils from 'gatsby-theme-carbon/src/components/Utils';\nimport Layout from 'gatsby-theme-carbon/src/components/Layout';\nimport PageHeader from 'gatsby-theme-carbon/src/components/PageHeader';\nimport EditLink from 'gatsby-theme-carbon/src/components/EditLink';\nimport NextPrevious from 'gatsby-theme-carbon/src/components/NextPrevious';\nimport PageTabs from 'gatsby-theme-carbon/src/components/PageTabs';\nimport Main from 'gatsby-theme-carbon/src/components/Main';\nimport useMetadata from 'gatsby-theme-carbon/src/util/hooks/useMetadata';\nimport LastModifiedDate from 'gatsby-theme-carbon/src/components/LastModifiedDate';\n\nimport RepoLink from \"../components/RepoLink\";\nimport RepoLinkList from \"../components/RepoLinkList\";\nimport ButtonLink from \"../components/ButtonLink\";\nimport Person from \"../components/Person\";\nimport People from \"../components/People\";\nimport Seo from \"../components/seo\";\n\nconst RepoLayout = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n  const shortcodes = { RepoLink, RepoLinkList, Link, ButtonLink, Person, People, Seo }\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        <MDXProvider components={shortcodes}>{children}</MDXProvider>\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default RepoLayout;\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport * as styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"last-modified-date-module--bx--text-truncate--end--QgCc7\";\nexport var bxTextTruncateFront = \"last-modified-date-module--bx--text-truncate--front--kel8a\";\nexport var text = \"last-modified-date-module--text--ogPQF\";\nexport var row = \"last-modified-date-module--row--XJoYQ\";","import React from \"react\"\n//import * as scss from \"./ButtonLink.module.scss\"\n\nconst ButtonLink = (props) => {\n  return (\n    <a href={props.href} target=\"_blank\" rel=\"noreferrer\" title={props.title} className=\"bx--btn bx--btn--primary\" style={props.style}>{props.children}</a>\n  )\n}\n\nexport default ButtonLink\n\n\n\n","import React from \"react\"\nimport * as scss from \"./People.module.scss\"\n\nconst People = (li) => {\n  return (\n            <div className={scss.flex}>{li.children}</div>\n  )\n}\n\nexport default People\n\n\n\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"People-module--bx--text-truncate--end--wD3K1\";\nexport var bxTextTruncateFront = \"People-module--bx--text-truncate--front--SYa-4\";\nexport var flex = \"People-module--flex--LApLg\";","import React from \"react\"\nimport * as scss from \"./Person.module.scss\"\n\n\nconst Person = ({name, url, affiliation, img}) => {\n\n    return (\n      <a href={url} target=\"_blank\" rel=\"noreferrer\" className={scss.link}>\n    <div>\n                <img src={img} alt={name} title={name} className={scss.roundImg} />\n                <div className={scss.textReset}>\n                    <div className={scss.name}>{name}</div>\n                    <div className={scss.affiliation}>{affiliation}</div>\n                </div>\n    </div>\n        </a>\n  )\n}\n\nexport default Person\n\n\n\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"Person-module--bx--text-truncate--end--psPjf\";\nexport var bxTextTruncateFront = \"Person-module--bx--text-truncate--front--Q3WWN\";\nexport var roundImg = \"Person-module--roundImg--l8Swm\";\nexport var textReset = \"Person-module--textReset--Y0VEx\";\nexport var link = \"Person-module--link---uaJL\";\nexport var name = \"Person-module--name--xrah4\";\nexport var affiliation = \"Person-module--affiliation--t+v4k\";","import React from \"react\"\nimport {  StaticQuery, graphql, Link } from \"gatsby\"\nimport * as scss from \"./ReposByTag.module.scss\"\nimport Tags from \"../data/tags.json\"\n\nconst getTagIndex = (tagName) => {\n  const res = Tags.findIndex((t) => t.key === tagName)\n\n  if (res === -1) return 999\n\n  return res\n}\n\nconst getTagByKey = (tagName) => {\n  return Tags.find((t) => t.key === tagName) || false\n}\n\nconst sortTags = (a, b) => {\n  const idxA = getTagIndex(a)\n  const idxB = getTagIndex(b)\n\n  if (idxA > idxB) {\n    return 1;\n  }\n  if (idxA < idxB) {\n    return -1;\n  }\n  return 0;\n}\n\nconst renderTagList = (tags) => {\n  const items = []\n\n  for (const t of tags.sort((a, b) => sortTags(a, b))) {\n    let tagClass = \"bx--tag\"\n    if (getTagByKey(t)) {\n      tagClass += \" bx--tag--green\"\n    } else {\n      tagClass += \" bx--tag--cool-gray\"\n    }\n    items.push(<button class={tagClass}> <span class=\"bx--tag__label\" title={getTagByKey(t).name}>{t}</span> </button>)\n  }\n\n  return items\n}\n\nconst getPage = (d, url) => {\n  const slug = url.replace(\"/toolkit/\",\"\")\n  const pages = d.allMdx.edges\n\n  const res = pages.filter( p => p.node.slug === slug)\n\n  return res[0].node\n}\n\nconst renderFunction = (d, url) => {\n  const data = getPage(d, url)\n  const fm = data.frontmatter\n  const slug = data.slug\n  const to = `/toolkit/${slug}`\n\n  const item = (\n    <div>\n      <div className={scss.pb}>\n        <h4>{fm.title}</h4>\n        <p className={scss.italic}>{fm.description}</p>\n      </div>\n      <p className={scss.pt}>{renderTagList(fm.tags)}</p>\n    </div>\n  )\n\n  return <Link to={to} className={scss.tile}>{item}</Link>\n}\n\nconst RepoLink = (url) => (\n  <StaticQuery\n    query={graphql`\n    {\n      allMdx(\n        filter: {fields: {source: {eq: \"toolkit\"}}, frontmatter: {tags: {}}, slug: {}}\n        sort: {fields: frontmatter___weight, order: ASC}\n      ) {\n        edges {\n          node {\n            id\n            slug\n            frontmatter {\n              description\n              tags\n              url\n              title\n            }\n          }\n        }\n      }\n    }\n    `}\n    render={data => renderFunction(data, url.to)}\n  />\n)\n\n\nexport default RepoLink\n\n\n\n","import React from \"react\"\nimport * as scss from \"./ReposByTag.module.scss\"\n\n\n\nconst RepoLinkList = (li) => {\n    return <div className={scss.flex}>{li.children}</div>\n}\n\n\nexport default RepoLinkList\n\n\n\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, lang, meta, image: metaImage, title, pathname }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            keywords\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  let image = null\n  if (metaImage) {\n      if (metaImage.includes('https://') || metaImage.includes('http://')) {\n        image = metaImage\n      } else {\n        image = `${site.siteMetadata.siteUrl}/${metaImage}`\n      }\n  }\n\n  const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      link={\n        canonical\n          ? [\n              {\n                rel: \"canonical\",\n                href: canonical,\n              },\n            ]\n          : []\n      }\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          metaImage\n            ? [\n                {\n                  property: \"og:image\",\n                  content: image,\n                },\n                {\n                  property: \"og:image:width\",\n                  content: metaImage.width,\n                },\n                {\n                  property: \"og:image:height\",\n                  content: metaImage.height,\n                },\n                {\n                  name: \"twitter:card\",\n                  content: \"summary_large_image\",\n                },\n              ]\n            : [\n                {\n                  name: \"twitter:card\",\n                  content: \"summary\",\n                },\n              ]\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n  }),\n  pathname: PropTypes.string,\n}\n\nexport default Seo"],"names":["_frontmatter","layoutProps","MDXLayout","pageContext","children","location","Title","frontmatter","relativePagePath","titleType","tabs","title","frontmatterTheme","theme","description","keywords","date","interiorTheme","useMetadata","shortcodes","RepoLink","RepoLinkList","Link","ButtonLink","Person","People","Seo","pathPrefix","useStaticQuery","site","slug","pathname","replace","currentTab","split","filter","Boolean","slice","slugify","lower","Layout","homepage","pageTitle","pageDescription","pageKeywords","PageHeader","label","PageTabs","Main","padded","components","EditLink","LastModifiedDate","NextPrevious","Utils","MDXContent","props","mdxType","parentName","isMDXComponent","lastModified","Date","className","toLocaleDateString","day","year","month","href","target","rel","style","li","name","url","affiliation","img","src","alt","getTagIndex","tagName","res","Tags","t","key","getTagByKey","renderTagList","tags","items","sort","a","b","idxA","idxB","sortTags","tagClass","push","class","StaticQuery","query","render","data","d","allMdx","edges","p","node","getPage","fm","to","item","scss","renderFunction","lang","meta","metaImage","image","metaDescription","siteMetadata","includes","siteUrl","canonical","htmlAttributes","titleTemplate","link","content","property","concat","width","height","defaultProps"],"sourceRoot":""}